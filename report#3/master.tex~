
\documentclass[a4paper, 12p]{paper} 
\usepackage[margin=2.5cm]{geometry}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{lipsum}
\usepackage{xcolor}
\usepackage{booktabs}
\usepackage{float}
\usepackage{subfigure}
\usepackage{titling}
\usepackage{kotex}

\def\code#1{\texttt{#1}}
\sectionfont{\large\sf\bfseries\color{black!70!blue}}
\date{\vspace{-5ex}}
\renewcommand{\familydefault}{\sfdefault}
\renewcommand{\baselinestretch}{1.3} 

\pretitle{\centering\LARGE\bfseries}
\posttitle{\par}
\preauthor{\begin{flushright}\large}
\postauthor{\end{flushright}}

\title{컴파일러 프로젝트 2 결과보고서}
\author{전자공학과 20161453 김규래}

\begin{document} 
\maketitle\hrule{}\bigskip


\begin{center}
\begin{tabular}{ l l }
과목코드 & CSE4120 \\
과목명  & 기초 컴파일러 구성 \\
담당교수 & 정성원 \\
\end{tabular}
\end{center}

\section{개발 목표}
이번 프로젝트에서는 Flex 와 Bison 을 활용하여 C- 언어의 parser 를 제작해보고, 생성되는 AST 를 출력해서 확인하는 것을 목표로 한다.
이전 프로젝테에서 scanning 또는, lexing 까지 개발을 하였다면 이번에는 이전에 만든 lexer 를 이용해서 parsing 을 수행하게 된다.

\textbf{Parsing} 파싱 또는 \textit{syntactic analysis} 는 token 들의 스트림을 분석해서 syntax tree 의 어떠한 abstract 한 representation 을 만드는 작업이다. 이 때 이 token 들의 스트림이 어떠한 문법적인 규칙을 만족하는 것을 확인해야 한다.

\textbf{Abstract Syntax Tree} 결과적으로 생성되는 abstract representation 은 일명 \textit{Abstract Syntax Tree} (AST) 로, token 들간의 관계를 tree 형태로 표현하는 자료구조이다.

\section{개발내용}
\subsection{개요}
본 프로젝트에서는 수업 교재 \textit{Compiler Construction Principles and Practices} 에서 제공하는 파일들을 포함하여 다음과 같은 프로젝트 파일 구성을 갖고 있다.
\begin{itemize}
  \item \textbf{globals.h} 전역변수 및 타입 정의
  \item \textbf{main.c} 진입점 및 커맨트라인 인자 처리 코드
  \item \textbf{util.c}, \textbf{util.h} 프로젝트에서 사용되는 유틸리티 코드
  \item \textbf{scan.h}, \textbf{scan.c} (자동생성) lexing 관련 코드
  \item \textbf{parse.h}, \textbf{parse.c} (자동생성) scanning 관련 코드
  \item \textbf{cminus.lex} Flex 의 lexing 규칙 정의
  \item \textbf{cminus.y} Bison 의 parsing 파싱 규칙 정의
\end{itemize}

scan.c 와 parse.c 의 경우에는 각각 Flex 와 Bison 에서 자동으로 생성을 해주는 파일들이다. 따라서 이들을 제외하고, 실제로 작성을 한 파일들의 호출 관계를 시각화할 경우에 Fig.~\ref{fig:diagram} 와 같다.

\begin{figure}[h]
\centering
\includegraphics[scale=0.5]{fig/diagram.png}
\caption{호출 diagram}\label{fig:diagram}
\end{figure}

main 에서 먼저 \code{parse} 를 호출할 경우 파싱을 시작하며, Bison 에서 생성해주는 \code{yyparse} 함수가 계속 후출되면서 파싱작업이 수행된다. \code{yyparse} 에서는 \code{getToken} 을 호출하면서 lexing 으로 token 을 받는다. 이 때 getToken 은 Flex 에서 생성해주는 함수인 yylex 를 호출한다.

\subsection{개발내용}
개발은 Manjaro Linux 시스템에서 Flex 2.6.0, Bison 3.0.4 와 GCC 8.2.1, GNU Make 4.2.1 을 이용하여 하였으며, Emacs 텍스트 에디터를 사용하였다. 개발 후에는 CS Pro 에서 동작 여부를 확인하였다.

모든 코드는 GCC 에서 \code{-Wextra -Wall -Wpedantic -O3 -g -march=native} 컴파일러 옵션을 사용해서 컴파일하였다.

\subsection{문법 규칙}
C- parser 의 문법 규칙은 교재 492p 에 주어진 syntax 를 그대로 사용하였으나, 아래와 같이 $start$ 라는 규칙을 하나 추가하였다. 또한 책에서는 여기서 $start$ 는 LALR 파싱의 start symbol 이 된다. 이와 같은 수정을 하게 된 이유는 Bison 이 start symbol 로 사용한 symbol 은 자동적으로 discard 하게 되는데, 생성한 AST 의 루트 노드를 discard 당하지 않기 위해서는 심볼을 하나 더 추가해서 AST 를 별도로 저장을 해야되기 때문이다.

\begin{align}
  start &\rightarrow program  \\
  program &\rightarrow declaration-list
\end{align}

\subsection{Abstract Syntax Tree 노드}
사용한 AST 의 노드는 총 9가지 attribute 들을 갖고 있다. Fig.~\ref{fig:ast_node} 에서 관련 코드를 볼 수 있고 정리하자면 아래와 같다.

\begin{itemize}
  \item \textbf{child} 현재 노드의 child 노드 포인터들. 최대 3개까지 존재할 수 있다.
  \item \textbf{sibling} 현재 노드의 sibling 노드 포인터.
  \item \textbf{lineno} 현재 노드와 관련된 코드의 소스파일에서의 위치.
  \item \textbf{nodekind} 현재 노드가 statement 또는 expression 인지에 대한 분류
  \item \textbf{kind} 현재 노드가 statement 또는 expression 일 때 각각에서의 세부 분류.
    \begin{align*}
      statement \in &\{\; if-statement, repeat, assignment, variable-declaration, \\
      &\;function-declaration, compound-statement, return \; \} \\
      expression \in &\{\;operation-expression, constant, identifier, function-call\;\}
    \end{align*}
  \item \textbf{type} Type 을 갖는 node 인 경우에는 \code{void} 또는 \code{int} 타입인지를 명시.
  \item \textbf{value} Constant value 를 갖는 node 인 경우에는 그 값을 저장.
  \item \textbf{is\_array} 배열 타입의 변수인지를 명시. 
\end{itemize}

\begin{figure}[h]
\centering
\includegraphics[scale=0.8]{fig/ast_node.png}
\caption{AST 의 node 타입}\label{fig:ast_node}
\end{figure}

\subsection{Abstract Syntax Tree 출력}
AST 를 출력하는 코드의 경우에는 교재에서 주어직 코드를 토대로 statment 인 경우에는 AST node 의 attribute 를 더 자세하게 출력하도록 하였다. 형식을 명시하면 다음과 같다.

\begin{center}
statment 의 종류 \\
~~~~~~~~~~~~~~~~~* attribute 이름: attribute 값
\end{center}

아래는 Function declaration statement 를 출력한 예시이다. Function decleration 의 경우에는 선언되는 함수의 이름, 그리고 함수의 리턴 타입 두 가지 attribute 를 갖는다. Fig~\ref{fig:stmt_ex} 에서 각각의 속성들이 출력되는 것을 볼 수 있다.

\begin{figure}[h]
\centering
\includegraphics[scale=0.7]{fig/stmt_ex.png}
\caption{Statement 출력 예시}\label{fig:stmt_ex}
\end{figure}

expression 에 대해서는 다음과 같이 간결하게 출력학도록 하였다.
\begin{center}
  expression 이름: expression attribute
\end{center}

아래는 Expression 을 실제로 출력한 예시이다. Fig.~\ref{fig:expr_ex} 에서 constant expression 이 출력되는 것을 볼 수 있다. Constant expression 의 경우에는 constant 의 값이 attribute 이므로 그 값인 0이 출력되는 것을 볼 수 있다.

\begin{figure}[h]
\centering
\includegraphics[scale=0.8]{fig/expr_ex.png}
\caption{Expression 출력 예시}\label{fig:expr_ex}
\end{figure}

이 외에도 각각의 statement 에서 출력되는 attribute 들의 종류들을 표로 정리하였다. 괄호 안에 명시된 것은 실제로 출력될 때의 이름이다.

\begin{center}
\begin{tabular}{ l | l }
statement 종류 &  출력 attribute \\\hline 
if stmt       &      \\
repeat stmt   &      \\
assign stmt   &      \\
variable decl & 변수명 (name), 변수 타입 (type), 배열인 경우 배열 크기 (array size) \\
function decl & 함수명 (name), 반환 타입 (return type)  \\
compound stmt & \\
return stmt & \\
\end{tabular}
\end{center}

다음은 epxression 별로 출력되는 attribute 들의 종류들이다. 괄호 안에 있는 것은 실제로 출력할 때 사용되는 이름이다.

\begin{center}
\begin{tabular}{ l | l }
expression 종류       &  출력 attribute \\\hline 
operation            &  연산 종류     \\
constant             &  상수 변수의 값 \\
identifier (id)      &  identifier 의 이름 \\
function call (call) &  호출 함수명   \\
\end{tabular}
\end{center}

\subsection{에러 메세지}
Syntax error 메세지는 다음과 같은 형식으로 출력을 하도록 하였다.

\begin{center}
  Syntax error at line [줄번호]: [에러 메세지]
\end{center}

Bison 에서 제공하는 syntax error 스타일에는 몇가지가 존재하는데 그 중에서 가장 자세한 \code{verbose} 를 설정하였다. 별도로 설정을 하지 않는 경우에는 Bison 에서 token의 이름을 에러 메세지에 그대로 출력을 해버린다. 사람이 조금더 읽기 편하도록 token 대신에 lexeme을 에러 메세지를 출력하게 하기 위해서는, 각 token 마다 alias 를 지정해줘야 한다. Fig.~\ref{fig:alias} 에서과 같이 각 토큰의 alias 일일이 지정을 해주었으며, 그 때 출력되는 에러 코드의 예시를 Fig~\ref{fig:syntax_error_ex} 에서 볼 수 있다. \code{verbose} 모드를 사용한 결과, syntax error 에 error 가 발생한 원인이 되는 토큰의 lexeme 또는 alias 와, error 가 발생하지 않으려면 취해야되는 조치를 Bison 이 알려주는 것을 확인할 수 있다.

\begin{figure}[h]
\centering
\includegraphics[scale=0.7]{fig/token_alias.png}
\caption{Bison 스크립트에서의 token 정의 모습}\label{fig:alias}
\end{figure}

\begin{figure}[h]
\centering
\includegraphics[scale=0.7]{fig/syntax_error_ex.png}
\caption{Syntax error 출력 예시}\label{fig:syntax_error_ex}
\end{figure}

\subsection{메모리 해제}
교재에서 주어진 코드에는 메모리 해제 관련된 작업이 전혀 이루어져 있지 않으나, 정상적이라면 Bison 을 사용할 때도 메모리 관리를 해줘야 한다. Bison 의 경우, start 토큰과 에러가 발생했을 경우 스택에 있는 토큰들을 discard 하는데, 이 discard 되는 토큰들에 대해서 destructor 를 정의해줄 수 있다. AST 생성 과정에서 동적할당이 이뤄지는 경우는 두가지인데 AST 의 노드를 새로 생성했을 때와 ID 토큰이 들어왔을 때이다. 각각에 대해서 destructor 를 Fig.~\ref{fig:destructor} 에서와 같이 정의를 해주었고, 결과 검토 과정에서 메모리 누수 여부도 따로 확인하였다.

Fig.~\ref{fig:destructor} 에서 \code{destroyNode} 는 AST 노드를 해제해주는 서브루틴인데, 1.AST 의 동적할당된 attribute, 2.child 노드, 3.sibling 노드 들을 해제한다.

\begin{figure}[h]
\centering
\includegraphics[scale=0.8]{fig/destructors.png}
\caption{Destructor들을 정의한 모습.}\label{fig:destructor}
\end{figure}

\subsection{Shift-Reduce Conflict}
C- 언어의 문법에는 (뿐만 아니라 대부분의 현대 프로그래밍 언어들에는) \textit{dangling else} 라는 문제가 존재한다. 이 문제는 LR(1), SLR(1), LALR(1) 문법에서 if-statement 의 else 부분에서 shift-reduce conflict 가 존재한다는 것이다. Bison 에서 생성해주는 parser 의 DFA diagram Fig.~\ref{fig:conflict} 에서 이 conflict 를 확인할 수 있다.

\begin{figure}[h]
\centering
\includegraphics[scale=0.4]{fig/conflict.png}
\caption{State 90 에서 발생하는 shift-reduce conflict. ELSE 토큰에 대해서 shift 와 reduce 모두 존재하는 것을 볼 수 잇다.}\label{fig:conflict}
\end{figure}

Bison 에서는 이런 shift-reduce 나 reduce-reduce conflict 를 해소하기 위해서 몇가지 방법들을 제공한다. 그 중에 하나가 associativity 를 정하는 것이고, 다른 하나가 syntax rule 명시 순서를 우선순위로 해석하는 것이다. 이 프로젝트에서는 단순하다는 점에서 후자를 사용하였다. 

\subsection{Operator Precendence}
곱셈과 나눗셈에 대해서 더 높은 연산자 우선순위를 부여해주는 것이 필요한데, 교재에서 주어진 syntax rule 에 이미 곱셈과 나눗셈의 연산자 우선순위가 더 높도록 돼있다. Left associativity 만 추가로 적용을 해주면 되기 때문에 아래와 같이 associativity 를 설정하였다.

\begin{figure}[h]
\centering
\includegraphics[scale=0.4]{fig/associativity.png}
\caption{연산자들의 associativity 를 설정한 모습}\label{fig:conflict}
\end{figure}

\section{개발결과}
\subsection{실행}

개발한 C- Parser 는 다음과 같은 방법으로 실행해볼 수 있다. Token table 은 출력하지 않게 설정하였기에 AST 만이 출력된다.

\begin{center}
  \code{./20161453}~~~\textit{sourcefile} 
\end{center}

\subsection{AST 출력 결과}
아래는 소스코드를 입력했을 출력되는 AST 이다. 위에서 언급했던 대로 Statement 들의 경우 각각의 세부 attribute 들이 출력되고, expression 의 경우 attribute 가 간략하게 출력되는 것을 볼 수 있다.

\begin{figure}[H]
\centering
\subfigure[source code]{
\includegraphics[scale=1.0]{fig/source.png}
}
\subfigure[AST output]{
\includegraphics[scale=0.8]{fig/output.png}
}
\caption{(a) 입력한 C- 소스코드. (b) AST 출력 결과.}\label{fig:result}
\end{figure}

\end{document}
